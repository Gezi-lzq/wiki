created: 20230405041409903
creator: Gezi
modified: 20230405043649102
modifier: Gezi
title: 使用发布/订阅模式
type: text/vnd.tiddlywiki

!! 方案
# 进行领域建模抽象，将网关整体比作消息通道
# 订阅者和消费者可以多对多组合，灵活处理业务逻辑
# 数据-上报,广播,通讯 等场景都可以适用
# 不同的场景，分不同的集群，接入不同域名下ip config server
# 其中通信可以根据Qos进行 策略分级
# 通过token机制做到业务角色的权限隔离,在gateway 做acl鉴权
# Token 由 ip config 动态下发 
# 也必须做资源上的运行时隔离

其实长连接网关本质上就是一个消息通道，在设计模式上就可以理解为一个''发布/订阅模式''。

因此可以在代码中抽象出来发送者与接收者的概念，其次对于消息通道来说，有如下业务场景：

<<reuse-tiddler "消息通信场景">>

针对不同场景，可以拆分不同的集群，放在不同的域名下，配置不同的ip config。不同的业务场景需要不同的[[Qos策略]]来保障消息的可靠性和及时性。例如，在一些对实时性要求很高的场景，如股票交易系统，消息必须通过高速网络进行即时传输。而在一些数据上报场景，如车辆追踪系统，消息的延迟和丢失可以容忍，因此可以采用低速网络进行传输。在这种情况下，基于不同的业务场景，不同的Qos策略可以灵活地应用于消息传输中。

如此，即还可根据不同的业务方，分配不同的QoS进行在线的策略分级去做控制；每个业务方可以通过token机制做到业务角色的权限隔离，在gateway做acl鉴权，可以根据角色的权限设置和授权规则，对不同的业务数据进行访问控制和权限管控。这种方式可以有效地保障数据的完整性和安全性。

同样，为了进行资源的运行时隔离，业务的运行环境需要进行隔离和容器化。这样，在面对负载过高或者异常情况时，可以保证业务互不干扰。

!! 收益

# 可以灵活的处理多对多的订阅者和消费者，适用于数据上报、广播、通信等场景.
# 较高的抽象，可以实现代码复用，实现中台

!! 代价

# 业务代码抽象程度较高，理解成本高，设计成本会很大
# 对代码高复用的要求，是否符合当前业务发展需要进行一定的权衡(是否存在过度设计)