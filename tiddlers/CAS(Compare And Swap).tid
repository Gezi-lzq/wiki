created: 20230328131542944
creator: Gezi
modified: 20230328132212767
modifier: Gezi
tags: Golang高并发
title: CAS(Compare And Swap)
type: text/vnd.tiddlywiki

基于CAS（Compare And Swap）的无锁实现是指在多线程环境下不使用锁来确保并发安全，而是使用CAS操作可以在不加锁的前提下实现线程安全。

CAS操作是一种''原子性操作''

它比较''指定内存位置的值与给定的预期值''

* 如果相等，就将该内存位置的值修改为新值

* 如果不相等，就不做任何操作。

这种方式避免了锁的竞争，提高了程序的性能。在实现中，对待修改的共享变量进行CAS操作，在操作前读取其值，如果值与预期相符，则操作成功，否则重复尝试，直到操作成功。

> 简单来说，CAS 的含义是“我认为原有的值应该是什么，如果是，则将原有的值更新为新值，否则不做修改，并告诉我这个值现在是多少”。

但需要注意的是，CAS操作可能会引发[[ABA问题]]，即先后两次读取该变量，中间某一时刻被其他线程修改变成了另一个值，再改回原来的值，而CAS操作会认为没有被修改过。

因此，在实现中需要采用一些防止ABA问题的手段，比如使用带版本号的CAS操作，避免误判。