created: 20230322073227023
creator: Gezi
modified: 20230322074228593
modifier: Gezi
tags: IO多路复用第一版(select/poll)
title: poll
type: text/vnd.tiddlywiki

! poll

1993年实现了poll函数。可以认为poll是一个增强版本的select，因为select的比特位操作决定了一次性最多处理的读或者写事件只有1024个，而poll使用一个新的方式优化了这个模型。

!! 数据结构和参数定义

poll底层操作的数据结构pollfd，使用链表存储：

```c
struct pollfd {
	int fd;          // 需要监视的文件描述符
	short events;    // 需要内核监视的事件,比如读事件、写事件
	short revents;   // 实际发生的事件，如果该文件描述符有事件发生置为1
};
```

使用poll函数进行操作

```c
int poll(struct pollfd* fds, nfds_t nfds, int timeout);
```

* 参数说明：

* `fds`：一个pollfd队列的''队头指针''，我们先把需要监视的文件描述符和他们上面的事件放到这个队列中
* `nfds`：队列的长度
* `timeout`：事件操作，设置指定正数的阻塞事件，0表示非阻塞模式，-1表示永久阻塞。

!! 执行过程
基本与select函数执行过程类似：

1. 用户线程调用poll系统调用，并将文件描述符链表拷贝到内核空间

2. 内核对文件描述符遍历一遍，如果没有就绪的描述符，则内核开始休眠，直到有就绪的文件描述符

3. 返回给用户线程就绪的文件描述符数量

4. 用户线程再遍历一次文件描述符链表，找出就绪的文件描述符，并将events重置为0，便于复用

5. 用户线程对就绪的文件描述符进行读写操作

!! 优点

* poll使用pollfd数组来代替select中的bitmap，数组没有1024的限制，可以一次管理更多的client。它和 select 的主要区别就是，去掉了 select 只能监听 1024 个文件描述符的限制。 

* 当pollfds数组中有事件发生，相应的revents置位为1，遍历的时候又置位回零，实现了pollfd数组的重用

!! 缺点

* poll 解决了select缺点中的前两条，其本质原理还是select的方法，还存在select中原来的问题

** pollfds数组拷贝到了内核态，仍然有开销 

** poll并没有通知用户态哪一个socket有数据，仍然需要O(n)的遍历
