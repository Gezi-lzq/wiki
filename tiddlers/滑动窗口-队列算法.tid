created: 20230328065826176
creator: Gezi
modified: 20230328073252775
modifier: Gezi
tags: 分布式限流系统
title: 滑动窗口-队列算法
type: text/vnd.tiddlywiki

在限流场景下，滑动窗口-队列算法可以用来限制在一定时间窗口内接收的请求数量。比如，设定一个时间窗口为1分钟，最多允许接收100个请求。具体实现如下：

1. 确定起始时间点为当前时间。

2. 创建一个队列，用来记录当前时间窗口内的请求时间戳。

3. 当请求到来时，判断当前时间是否在时间窗口内。

4. 如果在，查看当前时间窗口内的请求数量是否已经达到上限（100个），如果是，则不接受该请求，否则将该请求的时间戳加入队列，并将请求交给后端处理。

5. 如果不在，将时间戳最早的记录从队列中移除，并将时间窗口的起始时间点更新为第二早的记录时间。

6. 回到步骤3，再次检查请求的时间戳是否在时间窗口内。

```go
func check() bool{
		// 使用当前时间戳比较它是否在时间窗口起始点加上T时间段
    if (startTime + T) > now && now > startTime {
			  // 查看当前时间窗口内的请求数量是否已经达到上限
        if heap.Size() > M{
            return false
        }
				// 将该请求的时间戳加入队列
        heap.Push(now)
        return true
    }
		// 将时间戳最早的记录(队头)从队列中移除
    t := heap.Pop()
		// 将时间窗口的起始时间点更新为第二早的记录时间
    startTime = heap.Top()
    return check()
}
```

!! 不足

滑窗方法，需要额外的存储空间并且由于使用了优先级队列，性能受到影响，单机百万请求下延迟会很高。