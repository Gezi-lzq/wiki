created: 20220929021535640
creator: lzq
modified: 20220929025938872
modifier: lzq
tags: Golang高并发
title: 竞争条件
type: text/vnd.tiddlywiki

一个函数在线性程序中可以正确地工作。如果在并发的情况下，这个函数依然可以正确地工作的话，那么我们就说这个函数是并发安全的，并发安全的函数不需要额外的同步工作。

我们可以把这个概念概括为一个特定类型的一些方法和操作函数，对于某个类型来说，如果其所有可访问的方法和操作都是并发安全的话，那么该类型便是并发安全的。

''竞争条件''指的是程序在''多个goroutine交叉执行操作时''，没有给出正确的结果。

无论任何时候，只要有两个goroutine''并发访问同一变量''，且''至少其中的一个是写操作''的时候就会发生数据竞争。

如果数据竞争的对象是一个比一个机器字（译注：32位机器上一个字=4个字节）更大的类型时，事情就变得更麻烦了，比如interface，string或者slice类型都是如此。

一个好的经验法则是根本就没有什么所谓的良性数据竞争。所以我们一定要避免数据竞争，那么在我们的程序中要如何做到呢？

* 第一种方法是不要去写变量。只通过并发的访问变量是不会造成数据竞争的。

* 第二种避免数据竞争的方法是避免从多个goroutine访问变量。由于其它的goroutine不能够直接访问变量，它们''只能使用一个channel来发送请求给指定的goroutine来查询更新变量''。这也就是Go的口头禅“''不要使用共享数据来通信；使用通信来共享数据''”

* 第三种避免数据竞争的方法是允许很多goroutine去访问变量，但是''在同一个时刻最多只有一个goroutine在访问。这种方式被称为“互斥”''



