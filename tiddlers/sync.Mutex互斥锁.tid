created: 20220929235949824
creator: lzq
modified: 20220930001241609
modifier: lzq
tags: Golang高并发
title: sync.Mutex互斥锁
type: text/vnd.tiddlywiki

<<code src:"
var (
	mu      sync.Mutex
	balance int
)

func Deposit(amount int) {
	mu.Lock()
	balance = balance + amount
	mu.Unlock()
}

func Balance() int {
	mu.Lock()
	b := balance
	mu.Unlock()
	return b
}" language:"golang" title:"">>


惯例来说，被mutex所保护的变量是在mutex变量声明之后立刻声明的

在Lock和Unlock之间的代码段中的内容goroutine可以随便读取或者修改，''这个代码段叫做临界区''。

锁的持有者在其他goroutine''获取该锁之前需要调用Unlock''。

goroutine在结束后''释放锁是必要的''，无论以哪条路径通过函数都需要释放，即使是在错误路径中，也要记得释放。

> 一系列的导出函数封装了一个或多个变量，那么''访问这些变量唯一的方式就是通过这些函数来做''（或者方法，对于一个对象的变量来说）。每一个函数在一开始就''获取互斥锁并在最后释放锁''，从而保证共享变量''不会被并发访问''。这种''函数、互斥锁和变量的编排叫作监控monitor''