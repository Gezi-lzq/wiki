created: 20230329020352348
creator: Gezi
modified: 20230329022338060
modifier: Gezi
tags: 
title: Happens Before
type: text/vnd.tiddlywiki

<<<.tc-big-quote
!!序

在单个goroutine中，读写操作必须表现为按程序指定的顺序执行。

也就是说，编译器和处理器只有在重新排序不改变语言规范所定义的goroutine内行为时，才能重新排序在单个goroutine中执行的读写操作。

由于这种重新排序，某个goroutine观察到的执行顺序可能会与另一个goroutine所感知的顺序不同。

例如，如果一个goroutine执行a = 1; b = 2;，另一个goroutine可能会在观察到a的更新值之前观察到b的更新值。
<<<

<<<.tc-big-quote
!! 定义
为了确定读取和写入的要求，我们在Go程序中定义了Happens before，它是对内存操作执行的部分顺序。如果事件`e1`发生在事件`e2`之前，则我们说`e2`发生在`e1`之后。而且，如果`e1`既不在`e2`之前也不在`e2`之后发生，则我们说`e1`和`e2`同时发生。
<<<

在单个 goroutine 当中，事件发生的顺序，就是程序所表达的顺序

<<<
假设我们现在有一个变量 `v`，然后只要满足下面的两个条件，那么读取操作 `r` 就可以对这个变量 `v` 的写入操作 `w` 进行监测

* 读取操作 `r` 发生在写入操作 `w` 之后
* 并且在 `w` 之后，`r` 之前没有其他对 `v` 的写入操作 `w`
<<<

注意这里说的只是读取操作 r 可以对 w 进行监测，但是能不能读到呢，可能可以也可能不行

<<<
为确保对变量 `v` 的读取操作 `r` 能够监测到''特定的对 `v` 进行写入的操作 `w`''，需''确保 `w` 是唯一允许被 `r` 监测的写入操作''。也就是说，若以下条件均成立，则 `r` 能保证监测到 `w`：
* `w` 发生在 `r` 之前。
* 对共享变量 `v` 的其它任何写入操作都只能发生在 `w` 之前或 `r` 之后。
<<<

这对条件的要求比第一个条件更强，它需要''确保没有其它写入操作与 w 或 r 并发''。

在单个 goroutine 当中这两个条件是等价的，因为单个 goroutine 中不存在并发，''在多个 goroutine 中就必须使用同步语义来确保顺序，这样才能到保证能够监测到预期的写入''


<<<.tc-big-quote
同时被多个goroutine访问的数据，需要使用串行化方式进行修改。为了串行化访问，需要使用通道操作或其他同步原语来保护数据，如sync和sync / atomic包中所提供的那些。
<<<
