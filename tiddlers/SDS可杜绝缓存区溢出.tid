created: 20230217074048582
creator: Gezi
modified: 20230217092950714
modifier: Gezi
tags: Redis-简单动态字符串
title: SDS可杜绝缓存区溢出
type: text/vnd.tiddlywiki

!! SDS可杜绝缓冲区溢出

* C 字符串不记录自身长度带来的另一个问题是''容易造成缓冲区溢出''（buffer overflow）。如果给字符串内容修改之前，没有给字符串分配足够的空间，则会出现缓冲区溢出。
* 当 SDS API 需要对 SDS 进行修改时， API 会先检查 SDS 的空间是否满足修改所需的要求， 如果不满足的话， API 会自动将 SDS 的空间扩展至执行修改所需的大小， 然后才执行实际的修改操作， 所以使用 SDS 既不需要手动修改 SDS 的空间大小， 也不会出现前面所说的缓冲区溢出问题。

!! 修改字符串时的内存重分配次数

因为 C 字符串的长度和底层数组的长度之间存在着这种关联性， 所以每次增长或者缩短一个 C 字符串， 程序都''总要对保存这个 C 字符串的数组进行一次内存重分配操作''。内存重分配涉及复杂的算法， 并且可能需要执行系统调用， 所以它通常是一个比较耗时的操作。

SDS 通过未使用空间解除了字符串长度和底层数组长度之间的关联： 在 SDS 中， buf 数组的长度不一定就是字符数量加一， 数组里面可以包含未使用的字节， 而这些字节的数量就由 SDS 的 free 属性记录。

通过未使用空间， SDS 实现了空间预分配和惰性空间释放两种优化策略。

* 空间预分配：用于优化SDS的字符串增长操作，会为SDS分配一些额外的未使用空间。在扩展 SDS 空间之前， SDS API 会先检查未使用空间是否足够， 如果足够的话， API 就会直接使用未使用空间， 而无须执行内存重分配。

通过以下预分配策略，SDS 将连续增长 N 次字符串所需的内存重分配次数从必定 N 次''降低为最多 N 次''：

<<<
如果对 SDS 进行修改之后， SDS 的长度（也即是 len 属性的值）将小于 1 MB ， 那么程序分配和 len 属性同样大小的未使用空间， 这时 SDS len 属性的值将和 free 属性的值相同。 

如果对 SDS 进行修改之后， SDS 的长度将大于等于 1 MB ， 那么程序会分配 1 MB 的未使用空间。 
<<<


* 惰性空间释放：用于优化 SDS 的字符串缩短操作。 当 SDS 的 API 需要缩短 SDS 保存的字符串时， 程序并不立即使用内存重分配来回收缩短后多出来的字节， 而是使用 free 属性将这些字节的数量记录起来， 并等待将来使用。

通过惰性空间释放策略， SDS ''避免了缩短字符串时所需的内存重分配操作''， 并为将来可能有的增长操作提供了优化。当然，当我们在有需要时，可以通过其他API真正释放SDS里面的未使用空间。