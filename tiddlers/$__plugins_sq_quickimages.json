{"tiddlers":{"$:/core/ui/EditTemplate/body/default":{"title":"$:/core/ui/EditTemplate/body/default","text":"\\procedure customImportFileActions()\n\\procedure tv-action-refresh-policy() always\n\\procedure imageTextTitle() $:/config/sq/quickimage/image-transclusion-text\n\\procedure defaultTextTitle() $:/config/sq/quickimage/default-transclusion-text\n<$let\n\ttiddlerJSON={{{[<importTitle>get[text]jsonextract[tiddlers]]}}}\n\treplacement-text-image={{{ [<imageTextTitle>get[text]] }}}\n\treplacement-text-file={{{ [<defaultTextTitle>get[text]] }}}\n\tcontentTiddler={{{ [<currentTiddler>get[draft.of]else<currentTiddler>] }}}\n\t>\n\t<!-- iterate over each position in the array -->\n\t<$list filter=\"[<tiddlerJSON>jsonindexes[]]\" variable=\"index\">\n\t\t<!-- get the tiddler at that position in the array from the JSON -->\n\t\t<$let\n\t\t\ttiddler={{{ [<tiddlerJSON>jsonextract<index>] }}} \n\t\t\ttitle={{{ [<tiddler>jsonget[title]] }}}\n\t\t\ttype={{{ [<tiddler>jsonget[type]] :else[[text/vnd.tiddlywiki]] }}}\n\t\t\tunusedtitle={{{ [<title>] :cascade[{$:/config/sq/quickimage/file-title-cascade}splitregexp[\\n]!prefix[\\\\]!is[blank]] }}}\n\t\t>\n\t\t<$action-log $$filter=\"title unusedtitle\"/>\n\t\t\t<!-- make sure we have a title for the tiddler -->\n\t\t\t<$list filter=\"[<unusedtitle>!is[blank]]\">\n\t\t\t\t\t<$action-setmultiplefields\n\t\t\t\t\t\t$fields=\"[<tiddler>jsonindexes[]] :except[[title]] created modified quickimage\"\n\t\t\t\t\t\t$values=\"[<tiddler>jsonindexes[]] :except[[title]] :map[<tiddler>jsonget<currentTiddler>] [<now [UTC]YYYY0MM0DD0hh0mm0ssXXX>] :all[<now [UTC]YYYY0MM0DD0hh0mm0ssXXX>] yes\"\n\t\t\t\t\t\t$timestamp=\"no\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t<$list filter=\"[<currentTiddler>] :map[get[type]prefix[image]then<replacement-text-image>else<replacement-text-file>substitute[]]\" variable=\"imageTitle\">\n\t\t\t\t\t\t<$action-transmit actions=`<$action-sendmessage\n\t\t\t\t\t\t\t$message=\"tm-edit-text-operation\"\n\t\t\t\t\t\t\t$param=\"insert-text\" text=\"$(imageTitle)$\"/>` target=\"editor-import\"/>\n\t\t\t\t\t</$list>\n\t\t\t\t\t<$action-deletetiddler $tiddler=<<importTitle>>/>\n\t\t\t</$list>\n\t\t</$let>\n\t</$list>\n</$let>\n\\end customImportFileActions\n\n\\widget $dropzone(importTitle, autoOpenOnImport, contentTypesFilter, class, enable, filesOnly, actions)\n<$let\n\tconfigTitle=\"$:/config/sq/quickimage/import/enable\"\n\tquickimageEnabled={{{ [<configTitle>get[text]trim[]match[no]else[yes]]  }}}\n\t>\n\t<$genesis\n\t\t$remappable=\"no\" \n\t\t$type=\"$dropzone\"\n\t\timportTitle=<<importTitle>>\n\t\tautoOpenOnImport=\"no\"\n\t\tcontentTypesFilter=<<contentTypesFilter>>\n\t\tclass=<<class> enable=<<enable>>\n\t\tfilesOnly=<<filesOnly>>\n\t\tactions={{{ [<quickimageEnabled>match[yes]then<customImportFileActions>else<actions>]  }}}\n\t>\n\t\t<$slot $name=\"ts-raw\"/>\n\t</$genesis>\n</$let>\n\\end\n\n<$transclude $tiddler=\"$:/core\" $subtiddler=\"$:/core/ui/EditTemplate/body/default\"/>"},"$:/plugins/sq/quickimages/ui/EditorToolsPropagate":{"title":"$:/plugins/sq/quickimages/ui/EditorToolsPropagate","condition":"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]","tags":"$:/tags/EditorTools","text":"<$propagate name=\"editor-import\"/>"},"$:/config/sq/quickimage/file-title-cascade":{"title":"$:/config/sq/quickimage/file-title-cascade","text":"\\\\ rename automatic names for screenshots/pasted images\n[<title>match[image.png]] :then[[screenshots/]addsuffix<now \"YYYY0MM0DD0hh0mm0ss0XXX\">addprefix[$:/images/]unusedfiletitle[]]\n\\\\ prefix all image titles with $:/images\n[<type>prefix[image]] :then[<currentTiddler>addprefix[$:/images/]unusedfiletitle[]]\n\\\\ filter matches all remaining tiddlers\n[unusedfiletitle[]]"},"$:/config/sq/quickimage/import/enable":{"title":"$:/config/sq/quickimage/import/enable","text":"yes"},"$:/config/sq/quickimage/default-transclusion-text":{"title":"$:/config/sq/quickimage/default-transclusion-text","text":"[[$(currentTiddler)$]]"},"$:/config/sq/quickimage/image-transclusion-text":{"title":"$:/config/sq/quickimage/image-transclusion-text","text":"[img[$(currentTiddler)$]]"},"$:/plugins/sq/quickimages/filters/unusedfiletitle.js":{"title":"$:/plugins/sq/quickimages/filters/unusedfiletitle.js","text":"/*\\\ntitle: $:/plugins/sq/quickimages/filters/unusedfiletitle.js\ntype: application/javascript\nmodule-type: filteroperator\n\nFilter operator for generating unique tiddler titles, while respecting file extensions.\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n/*\nExport our filter function\n*/\nexports.unusedfiletitle = function(source,operator,options) {\n\tvar results = [],\n\t\tseparator = operator.operand || \"\";\n\tsource(function(tiddler,title) {\n\t\tif(title) {\n\t\t\tvar value = generateUnusedTitle(title,separator,options);\n\t\t\tif(value) {\n\t\t\t\tresults.push(value);\n\t\t\t}\n\t\t}\n\t});\n\treturn results;\n};\n\nfunction generateUnusedTitle(baseTitle,separator,options) {\n\toptions = options || {};\n\tvar c = 0,\n\t\twiki = options.wiki,\n\t\tfilename = baseTitle.substring(0,baseTitle.lastIndexOf(\".\")),\n\t\textension = baseTitle.substring(baseTitle.lastIndexOf(\".\")),\n\t\ttitle = baseTitle;\n\twhile(wiki.tiddlerExists(title) || wiki.isShadowTiddler(title) || wiki.findDraft(title)) {\n\t\ttitle = filename + separator + (++c) + extension; \n\t}\n\treturn title;\n}\n\n})();","type":"application/javascript","module-type":"filteroperator"},"$:/plugins/sq/quickimages/readme":{"title":"$:/plugins/sq/quickimages/readme","text":"Quickly and silently import images that are pasted or dropped on to the editor, generating unique titles to ensure that new imports do not overwrite existing tiddlers.\n\n''To do:''\n\n* customization options for the image transclusion wikitext inserted in the editor (size, class options)\n* consider adding a field reference from each image tiddler to the tiddler in which they were imported\n* extend the editor with links to images used in the tiddler being edited, with affordances to rename or delete them\n* consider a log or report of all tiddlers silently imported, grouped by date and the tiddler from which they were imported"},"$:/plugins/sq/quickimages/settings":{"title":"$:/plugins/sq/quickimages/settings","text":"\\procedure infoState() $:/state/sq/quickimage/settings/info\n\\procedure cascadeInfoState() $:/state/sq/quickimage/settings/cascade\n\\procedure imageSyntax()\n<div style=\"margin:1em;padding:1em;border:1px solid #eee;border-radius:1em;background:#eee;\">\n\n\n!!!Substitution\n\nThe transclusion text is run through the `substitute[]` operator and can thus make use of substitution of variables `$(varname)$` and embedded filter expressions `${ filter expression }$`.\n\n!!!Image Syntax\n\nA tooltip can be specified:\n\n```\n[img[An explanatory tooltip|Motovun Jack.jpg]]\n```\n\nAttributes can be provided to specify CSS classes and the image width and height:\n\n```\n[img width=32 [Motovun Jack.jpg]]\n[img width=32 class=\"tc-image\" [Motovun Jack.jpg]]\n```\n\nNote that attributes can be specified as transclusions or variable references:\n\n```\n[img width={{!!mywidth}} class=<<image-classes>> [Motovun Jack.jpg]]\n```\n\n</div>\n\\end\n\n<$checkbox tiddler=\"$:/config/sq/quickimage/import/enable\" field=\"text\" checked=\"yes\" unchecked=\"no\" default=\"yes\"> Enable QuickImages</$checkbox>\n\n<$button set=<<infoState>> setTo={{{ [<infoState>get[text]match[show]then[hide]else[show]] }}} tooltip=\"syntax documentation\" class=\"btn-big btn-muted tc-float-right tc-btn-invisible\" style=\"font-size:1.5em;\">\n    <$transclude $tiddler=\"$:/core/images/help\"/>\n</$button>\n\n!!Image transclusion text:\n\n<$reveal type=\"match\" state=<<infoState>> text=\"show\" tag=\"div\" class=\"form-group\" retain=\"yes\" animate=\"yes\">\n\n    <<imageSyntax>>\n</$reveal>\n\n<$edit-text tiddler=\"$:/config/sq/quickimage/image-transclusion-text\" class=\"tc-edit-texteditor\"/>\n\n!!Default tranclusion text:\n\n<$edit-text tiddler=\"$:/config/sq/quickimage/default-transclusion-text\" class=\"tc-edit-texteditor\"/>\n\n<$button set=<<cascadeInfoState>> setTo={{{ [<cascadeInfoState>get[text]match[show]then[hide]else[show]] }}} tooltip=\"cascade documentation\" class=\"btn-big btn-muted tc-float-right tc-btn-invisible\" style=\"font-size:1.5em;\">\n    <$transclude $tiddler=\"$:/core/images/help\"/>\n</$button>\n\n!! Filter cascade for image tiddler titles:\n\n<$reveal type=\"match\" state=<<cascadeInfoState>> text=\"show\" tag=\"div\" class=\"form-group\" retain=\"yes\" animate=\"yes\">\n\n<div style=\"margin:1em;padding:1em;border:1px solid #eee;border-radius:1em;background:#eee;\">\n\n!!!Cascade tips:\n\n* start a line with `\\\\` to comment out that filter.\n* the first filter to match is used.\n\n''Variables available:''\n\n|title |tiddler being imported |\n|contentTiddler |tiddler being edited into which image was imported|\n|type |type of tiddler being imported |\n|tiddler |json serialization of tiddler being imported |\n\n</div>\n\n</$reveal>\n\n<$edit-text tiddler=\"$:/config/sq/quickimage/file-title-cascade\" class=\"tc-edit-texteditor\"/>"},"$:/plugins/sq/essentials/propagate.js":{"title":"$:/plugins/sq/essentials/propagate.js","text":"/*\\\n\ntitle: $:/plugins/sq/essentials/propagate.js\ntype: application/javascript\nmodule-type: widget\n\n\\*/\n(function(){\n\n\t/*jslint node: true, browser: true */\n\t/*global $tw: false */\n\t\"use strict\";\n\t\n\tvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\t\n\tvar PropagateWidget = function(parseTreeNode,options) {\n\t\tthis.initialise(parseTreeNode,options);\n\t};\n\t\n\t/*\n\tInherit from the base widget class\n\t*/\n\tPropagateWidget.prototype = new Widget();\n\t\n\t/*\n\tRender this widget into the DOM\n\t*/\n\tPropagateWidget.prototype.render = function(parent,nextSibling) {\n\t\tthis.computeAttributes();\n\t\tthis.execute();\n\t\tthis.parentDomNode = parent;\n\t\tthis.renderChildren(parent,nextSibling);\n\t};\n\t\n\t/*\n\tCompute the internal state of the widget\n\t*/\n\tPropagateWidget.prototype.execute = function() {\n\t\tthis.preactions = this.getAttribute(\"preactions\",\"\");\n\t\tthis.postactions = this.getAttribute(\"postactions\",\"\");\n\t\tthis.name = this.getAttribute(\"name\");\n\t\tthis.makeChildWidgets();\n\t};\n\n\tPropagateWidget.prototype.propagate = function(actionString) {\n\t\tactionString = this.preactions + actionString + this.postactions;\n\t\tthis.invokeActionString(actionString);\n\t}\n\t\n\t/*\n\tRefresh the widget by ensuring our attributes are up to date\n\t*/\n\tPropagateWidget.prototype.refresh = function(changedTiddlers) {\n\t\tvar changedAttributes = this.computeAttributes();\n\t\tif($tw.utils.count(changedAttributes) > 0) {\n\t\t\tthis.refreshSelf();\n\t\t\treturn true;\n\t\t}\n\t\treturn this.refreshChildren(changedTiddlers);\n\t};\n\t\n\texports[\"propagate\"] = PropagateWidget;\n\t\n\t})();","type":"application/javascript","module-type":"widget"},"$:/plugins/sq/essentials/action-transmit.js":{"title":"$:/plugins/sq/essentials/action-transmit.js","text":"/*\\\n\ntitle: $:/plugins/sq/essentials/action-transmit.js\ntype: application/javascript\nmodule-type: widget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget,\n\tPropagateWidget = require(\"$:/plugins/sq/essentials/propagate.js\").propagate;\n\nvar TransmitWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nTransmitWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nTransmitWidget.prototype.render = function(parent,nextSibling) {\n\tthis.computeAttributes();\n\tthis.execute();\n\tthis.parentDomNode = parent;\n\tthis.renderChildren(parent,nextSibling);\n};\n\n/*\nCompute the internal state of the widget\n*/\nTransmitWidget.prototype.execute = function() {\n\tthis.actions = this.getAttribute(\"actions\");\n\tthis.target = this.getAttribute(\"target\");\n\tthis.makeChildWidgets();\n};\n\n/*\nRefresh the widget by ensuring our attributes are up to date\n*/\nTransmitWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif($tw.utils.count(changedAttributes) > 0) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t}\n\treturn this.refreshChildren(changedTiddlers);\n};\n\n\nTransmitWidget.prototype.searchChildren = function(widget) {\n\tvar target,\n\t\tself = this;\n\tfor(const child of widget.children) {\n\t\tif(child instanceof PropagateWidget && child.getAttribute(\"name\") === this.target) {\n\t\t\ttarget = child;\n\t\t\tbreak;\n\t\t} else {\n\t\t\ttarget = self.searchChildren(child);\n\t\t\tif(!!target) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn target;\n};\n\n/*\nInvoke the action associated with this widget\n*/\nTransmitWidget.prototype.invokeAction = function(triggeringWidget,event) {\n\tvar target = this.searchChildren(triggeringWidget);\n\tif(target) {\n\t\ttarget.propagate(this.actions);\n\t}\n\treturn true;\n};\n\nexports[\"action-transmit\"] = TransmitWidget;\n\n})();","type":"application/javascript","module-type":"widget"}}}