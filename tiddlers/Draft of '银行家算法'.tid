created: 20230322083837853
creator: Gezi
draft.of: 银行家算法
draft.title: 银行家算法
modified: 20230623033717955
modifier: Gezi
tags: 操作系统
title: Draft of '银行家算法'
type: text/vnd.tiddlywiki

银行家算法（Banker’s Algorithm）是一个''避免死锁（Deadlock）的著名算法''

银行家算法是一种最有代表性的避免死锁的算法。在避免死锁方法中''允许进程动态地申请资源''，但系统在进行资源分配之前，应''先计算此次分配资源的安全性''，若分配不会导致系统进入不安全状态，则分配，否则等待。

为实现银行家算法，系统必须设置若干数据结构。

!! 数据结构

　(1) ''可利用资源向量 Available'' : 这是一个含有 m 个元素的数组，其中的''每一个元素代表一类可利用的资源数目''，其初始值是系统中所配置的该类全部可用资源的数目，其数值随该类资源的分配和回收而动态地改变。如果 Available[j] = K，则表示系统中现Rj类资源K个。


　　(2) ''最大需求矩阵Max'' : 这是一个n x m的矩阵，它''定义了系统中n个进程中的每个进程对m类资源的最大需求''。如果Max[i,j] = K，则表示进程i需要Rj 类资源的最大数目为K。


　　(3) ''分配矩阵 Allocation'' : 这也是一个n x m的矩阵，它定义了系统中每一类资源''当前已分配给每一进程的资源数''。如果 Allocation[i,jl = K，则表示进程i当前己分得Rj类资源的数目为K。


　　(4) ''需求矩阵Need'' : 这也是一个n×m的矩阵，用以表示每一个进程''尚需的各类资源数''。如果Need[i,j] = K，则表示进程i还需要Rj类资源K个方能完成其任务。


''关系：''

```
Need[i,j] = Max[i,j] - allocation[i, j]
```

! 银行家算法表述

设$$Request_i$$是进程$$P_i$$的请求向量，如果$$Request_i［j］=K$$，表示进程$$Pi$$需要K个$$Rj$$类型的资源。当$$P_i$$发出资源请求后，系统按下述步骤进行检查：

* 如果$$Request_i［j］<= Available[j]$$，即Pi当前请求的资源数量小于等于系统中未分配该资源的数量，进入下一步；否则，Pi需要等待资源释放再重新发出请求。

* 假设系统现在以满足Pi的请求，即$$Allocation_i［j］ = Allocation_i［j］ + Request_i［j］$$，$$Available_j = Available_j - Request_i［j］$$。

* 判断此时系统中是否仍然存在一个安全序列，如果存在，则进程Pi可以接受此次资源分配，否则，需要将Allocation和Available向量恢复到原来的状态，即$$Allocation_i［j］ = Available_i［j］ - Request_i［j］$$，$$Available_j = Allocation_j + Request_i［j］$$，同时让Pi等待，直到系统能够满足一个安全序列为止。
