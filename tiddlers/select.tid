created: 20230322022327487
creator: Gezi
modified: 20230322073156282
modifier: Gezi
tags: IO多路复用第一版(select/poll)
title: select
type: text/vnd.tiddlywiki

! select

select是第一个实现IO多路复用 (1983 左右在BSD里面实现)。select是三者当中最底层的，它的事件的轮训机制是''基于比特位的''。每次查询都要遍历整个事件列表。

[img[select数据结构与操作.png]]

[img width=600 [select函数调用.png]]

[img[select执行过程与相关代码.png]]

其中还有一部分，在server进行Accept时,等待新客户端连接，当有新客户端连接后，需要加入f_set中，调用select，重新将其拷贝到内核态

[img width=650 [select中接受新客户端时.png]]

!! 优点

* select 其实就是把NIO中用户态要遍历的fd数组''拷贝到了内核态''，''让内核态来遍历''，因为用户态判断socket是否有数据还是要调用内核态的，所有拷贝到内核态后，这样遍历判断的时候就''不用一直用户态和内核态频繁切换''了

* 从代码中可以看出，select系统调用后，返回了一个置位后的&rset，这样用户态只需进行很简单的二进制比较，就能很快知道哪些socket需要read数据，有效提高了效率

* 所有平台都支持，良好的跨平台性

!! 缺点

* bitmap最大1024位，''一个进程最多只能处理1024个客户端''

* &rset不可重用，每次socket有数据就相应的位会被置位 

* 文件描述符数组拷贝到了内核态(只不过无系统调用切换上下文的开销。（内核层可优化为异步事件通知）)，仍然有开销。select 调用需要传入 fd 数组，''需要拷贝一份到内核，高并发场景下这样的拷贝消耗的资源是惊人的''。（可优化为不复制） 

* select并没有通知用户态哪一个socket有数据，''仍然需要O(n)的遍历''。select ''仅仅返回可读文件描述符的个数''，具体哪个可读还是要用户自己遍历。（可优化为只返回给用户就绪的文件描述符，无需用户做无效的遍历）

!! 总结

select方式，既做到了一个线程处理多个客户端连接（文件描述符），又减少了系统调用的开销（多个文件描述符只有''一次 select 的系统调用 + N次就绪状态的文件描述符的 read 系统调用''