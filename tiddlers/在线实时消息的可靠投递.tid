created: 20230318084804690
creator: Gezi
modified: 20230318101817951
modifier: Gezi
tags: IM系统-plato
title: 在线实时消息的可靠投递
type: text/vnd.tiddlywiki

!IM消息送达保证机制实现(一)
!! 保证在线实时消息的可靠投递

消息的可靠性，即消息的不丢失和不重复

> [[消息“可靠性”和“一致性”问题]]

!! 报文类型

报文分为三种：

1. 请求报文 (request,简称为R)：客户端主动发送给服务器的报文

2. 应答报文 (acknowledge,简称为A)：客户端主动发送给服务器的报文

3. 通知报文 (notify,简称为N)：服务器主动发送给客户端的报文

!!! 普通消息投递流程

[img[普通消息投递过程.png]]

1. client-A向im-server发送一个消息请求包，即msg:R

2. im-server在成功处理后，回复client-A一个消息响应包，即msg:A

3. 如果此时client-B在线，则im-server主动向client-B发送一个消息通知包，即msg:N（当然，如果client-B不在线，则消息会存储离线）

!!!! 消息投递流程出现的隐患

当发送方client-A收到msg:A后，是否可以说明client-B接收到了消息呢？

答案是不能的,只能说明im-server成功接收到了消息。

在若干场景下，可能出现msg:N包丢失，且发送方client-A完全不知道，例如：

* 服务器崩溃，msg:N包未发出
* 网络抖动，msg:N包被网络设备丢弃
* client-B崩溃，msg:N包未接收

因此对于im这样一个三方通信的系统，如何''保证消息的可靠送达''？

!!! 应用层确认+im消息可靠投递的六个报文

TCP只能保证端到端之间传输的可靠，对于im这种三方之间的传输，若要保证消息的可靠投递，则需要通过应用层去实现这个特性。

因此，为了保障IM通信中A端-Server-B端的三方通信的可靠性，可以采用在应用层加入确认机制的办法来实现。

1. client-B 向 im-server 发送一个ack请求包，即ack:R

2. im-sercer在处理成功后，回复client-B一个ack响应包，即ack-A

3. im-server主动向client-A发送一个ack通知包，即ack-N

[img[应用层确认-消息投递过程.png]]

所以，当client-A收到了ack:N报文，才算真正确认client-B收到了消息。

> 一条消息的发送，分别包含（上）（下）两个半场，即msg的R/A/N三个报文，ack的R/A/N三个报文。一个应用层即时通讯消息的可靠投递，共涉及6个报文，这就是im系统中消息投递的最核心技术（如果某个im系统不包含这6个报文，不要谈什么消息的可靠性）。

!!!! 此方案仍然存在的隐患

1. msg:R，msg:A 报文可能丢失：
此时直接提示“发送失败”即可，问题不大；

2. msg:N，ack:R，ack:A，ack:N这四个报文都可能丢失：

此时client-A都收不到期待的ack:N报文，即client-A不能确认client-B是否收到“你好”。

!!! 消息的超时与重传

client-A发出了msg:R，收到了msg:A之后，在一个期待的时间内，如果没有收到ack:N，client-A会尝试将msg:R重发。

可能client-A同时发出了很多消息，故client-A''需要在本地维护一个等待ack队列，并配合timer超时机制''，来记录哪些消息没有收到ack:N，以定时重发。

一旦收到了ack:N，说明client-B收到了“你好”消息，对应的消息将从“等待ack队列”中移除。

!!!! 消息的重传存在什么问题

若ack:N 报文丢失：说明client-B之前已经收到了“你好”报文（只是client-A不知道而已），超时与重传机制将导致client-B收到重复的消息。

!!! 消息的去重

由发送方client-A生成一个消息去重的msgid，保存在“等待ack队列”里，同一条消息使用相同的msgid来重传，供client-B去重，而不影响用户体验。

