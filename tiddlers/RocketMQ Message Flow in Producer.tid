created: 20230804075104956
creator: Gezi-lzq
modified: 20240903071841952
modifier: Gezi-lzq
tags: RocketMQ
title: RocketMQ Message Flow in Producer
type: text/vnd.tiddlywiki

The workflow to publish a single message of NORMAL type. The message publishing of other types and publishing of batch messages is similar to it. Some special cases will be explained later.

The publishing procedure is as follows:

[img[message-flow-in-producer.png]]

a. 判断当前状态是否为运行状态

b. 判断需发送的MessageList是否是相同的Topic

c. 若Topic为FIFO，则判断是否是相同的messageGroup

---

1-3 step : [[Topic的获取]]

1. Check if topic route is cached before or not.

2. If topic route is not cached, then try to fetch it from server, otherwise go to step 4.

3. Return failure and end the current process if topic route is failed to fetch, otherwise cache the topic route and go to the next step.


4. Select writable candicate message queues from topic route to publish meessage.

* ProducerImpl#send

```java
return Futures.transformAsync(routeFuture, result -> {
    // Prepare the candidate message queue(s) for retry-sending in advance.
    final List<MessageQueueImpl> candidates = null == messageGroup ? takeMessageQueues(result) :
        Collections.singletonList(result.takeMessageQueueByMessageGroup(messageGroup));
    final SettableFuture<List<SendReceiptImpl>> future0 = SettableFuture.create();
    send0(future0, topic, messageType, candidates, pubMessages, 1);
    return future0;
}, MoreExecutors.directExecutor());
```
[[Producer LoadBalance]]

5. Return failure and end the current process if the type of message queue is not matched with message type.

* ProducerImpl#send0
```java
// Calculate the current message queue.
final MessageQueueImpl mq = candidates.get(IntMath.mod(attempt - 1, candidates.size()));
final List<MessageType> acceptMessageTypes = mq.getAcceptMessageTypes();
if (publishingSettings.isValidateMessageType() && !acceptMessageTypes.contains(messageType)) {
    final IllegalArgumentException e = new IllegalArgumentException("Current message type not match with "
        + "topic accept message types, topic=" + topic + ", actualMessageType=" + messageType + ", "
        + "acceptMessageTypes=" + acceptMessageTypes);
    future0.setException(e);
    return;
}
```

6. Attempt to publish message.


7. Return success and end the current process if message is published successfully.


8. Catch the error information of failed message publishing.


9. Return failure and end the current process if the attempt times is run out, otherwirse deecide to retry or not according to the error type.


10. Return failure and end the current process if there is no need to retry, otherwise go to the next step.


11. Isolate the current endpoint for publishing. [[isolate endpoint]]


12. Rotate to next message queue to publish message, and go to step 6.

[[生产者-消息重试流程]]